using Nextended.Core.Extensions;// <auto-generated /> (12.08.2025 14:30:12)
using System;
namespace MyGenerated.Code.Test {
	public static partial class MappingExtensions
	{
		public static void AssignTo(this CodeGenSample.Entities.AbstractBaseClass src, MyGenerated.Code.Test.AbstractBaseClassDto dest) 
		{
			if (src == null || dest == null) return;
			dest.Id = src.Id;
		}
		public static void AssignTo(this MyGenerated.Code.Test.AbstractBaseClassDto src, CodeGenSample.Entities.AbstractBaseClass dest) 
		{
			if (src == null || dest == null) return;
			dest.Id = src.Id;
		}
		public static MyGenerated.Code.Test.AbstractBaseClassDto ToDto(this CodeGenSample.Entities.AbstractBaseClass src, Func<MyGenerated.Code.Test.AbstractBaseClassDto> factory) 
		{
			if (src == null) return null;
			var result = factory != null ? factory() : null;
			if (result == null) return null;
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.AbstractBaseClass ToNet(this MyGenerated.Code.Test.AbstractBaseClassDto src, Func<CodeGenSample.Entities.AbstractBaseClass> factory) 
		{
			if (src == null) return null;
			var result = factory != null ? factory() : null;
			if (result == null) return null;
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.Address src, MyGeneration.AddressDto dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.Base.EntityBase)src).AssignTo(( EntityBaseDto )dest);
			dest.Street = src.Street;
			dest.City = src.City;
			dest.Country = src.Country;
			dest.Number = src.Number;
		}
		public static void AssignTo(this MyGeneration.AddressDto src, CodeGenSample.Entities.Address dest) 
		{
			if (src == null || dest == null) return;
			((EntityBaseDto)src).AssignTo(( CodeGenSample.Entities.Base.EntityBase )dest);
			dest.Street = src.Street;
			dest.City = src.City;
			dest.Country = src.Country;
			dest.Number = src.Number;
		}
		public static MyGeneration.AddressDto ToMegaDto(this CodeGenSample.Entities.Address src) 
		{
			if (src == null) return null;
			var result = new MyGeneration.AddressDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.Address AsSrc(this MyGeneration.AddressDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.Address();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.Base.EntityBase src, MyGenerated.Code.Test.EntityBaseDto dest) 
		{
			if (src == null || dest == null) return;
			dest.Id = src.Id;
			dest.ReferenceKey = src.ReferenceKey;
		}
		public static void AssignTo(this MyGenerated.Code.Test.EntityBaseDto src, CodeGenSample.Entities.Base.EntityBase dest) 
		{
			if (src == null || dest == null) return;
			dest.Id = src.Id;
			dest.ReferenceKey = src.ReferenceKey;
		}
		public static MyGenerated.Code.Test.EntityBaseDto ToDto(this CodeGenSample.Entities.Base.EntityBase src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.EntityBaseDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.Base.EntityBase ToNet(this MyGenerated.Code.Test.EntityBaseDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.Base.EntityBase();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated src, MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.Base.EntityBase)src).AssignTo(( EntityBaseDto )dest);
			dest.Name = src.Name;
		}
		public static void AssignTo(this MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto src, CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated dest) 
		{
			if (src == null || dest == null) return;
			((EntityBaseDto)src).AssignTo(( CodeGenSample.Entities.Base.EntityBase )dest);
			dest.Name = src.Name;
		}
		public static MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto ToDto(this CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated ToNet(this MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated();
			src.AssignTo(result);
			return result;
		}
		public static ENUMS.UserLevelDto? ToDto(this CodeGenSample.Entities.Enums.UserLevel? src) => src.HasValue ? (ENUMS.UserLevelDto)(int)src.Value : null;
		public static CodeGenSample.Entities.Enums.UserLevel? AsEntity(this ENUMS.UserLevelDto? src) => src.HasValue ? (CodeGenSample.Entities.Enums.UserLevel)(int)src.Value : null;
		public static ENUMS.UserLevelDto ToDto(this CodeGenSample.Entities.Enums.UserLevel src) => (ENUMS.UserLevelDto)(int)src;
		public static CodeGenSample.Entities.Enums.UserLevel AsEntity(this ENUMS.UserLevelDto src) => (CodeGenSample.Entities.Enums.UserLevel)(int)src;
		internal static void AssignTo<T, T2>(this CodeGenSample.Entities.GenericItem<T, T2> src, MyGenerated.Code.Test.GenericItemDto<T, T2> dest) where T : class where T2 : struct
		{
			if (src == null || dest == null) return;
			dest.Value = src.Value;
			dest.Id = src.Id;
		}
		internal static void AssignTo<T, T2>(this MyGenerated.Code.Test.GenericItemDto<T, T2> src, CodeGenSample.Entities.GenericItem<T, T2> dest) where T : class where T2 : struct
		{
			if (src == null || dest == null) return;
			dest.Value = src.Value;
			dest.Id = src.Id;
		}
		internal static MyGenerated.Code.Test.GenericItemDto<T, T2> ToDto<T, T2>(this CodeGenSample.Entities.GenericItem<T, T2> src) where T : class where T2 : struct
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.GenericItemDto<T, T2>();
			src.AssignTo<T, T2>(result);
			return result;
		}
		internal static CodeGenSample.Entities.GenericItem<T, T2> ToNet<T, T2>(this MyGenerated.Code.Test.GenericItemDto<T, T2> src) where T : class where T2 : struct
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.GenericItem<T, T2>();
			src.AssignTo<T, T2>(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.User src, MyGenerated.Code.Test.MyUserDto dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.Base.EntityBase)src).AssignTo(( EntityBaseDto )dest);
			dest.Name = src.Name;
			dest.ThatUserAddress = src.Address.MapTo<MyGeneration.AddressDto>();
			dest.AnotherAddress = src.AnotherAddress?.ToMegaDto();
			dest.XyZ = src.XyZ;
			dest.UserLevel = src.Level?.ToDto();
			dest.OtherInfos = src.OtherInfos;
		}
		public static void AssignTo(this MyGenerated.Code.Test.MyUserDto src, CodeGenSample.Entities.User dest) 
		{
			if (src == null || dest == null) return;
			((EntityBaseDto)src).AssignTo(( CodeGenSample.Entities.Base.EntityBase )dest);
			dest.Name = src.Name;
			dest.Address = src.ThatUserAddress.MapTo<global::CodeGenSample.Entities.Address>();
			dest.AnotherAddress = src.AnotherAddress?.AsSrc();
			dest.XyZ = src.XyZ;
			dest.Level = src.UserLevel?.AsEntity();
			dest.OtherInfos = src.OtherInfos;
		}
		public static MyGenerated.Code.Test.MyUserDto ToMyDto(this CodeGenSample.Entities.User src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.MyUserDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.User ToNet(this MyGenerated.Code.Test.MyUserDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.User();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.DerivedClass src, MyGenerated.Code.Test.DerivedClassDto dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.AbstractBaseClass)src).AssignTo(( AbstractBaseClassDto )dest);
			dest.Name = src.Name;
		}
		public static void AssignTo(this MyGenerated.Code.Test.DerivedClassDto src, CodeGenSample.Entities.DerivedClass dest) 
		{
			if (src == null || dest == null) return;
			((AbstractBaseClassDto)src).AssignTo(( CodeGenSample.Entities.AbstractBaseClass )dest);
			dest.Name = src.Name;
		}
		public static MyGenerated.Code.Test.DerivedClassDto ToDto(this CodeGenSample.Entities.DerivedClass src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.DerivedClassDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.DerivedClass ToNet(this MyGenerated.Code.Test.DerivedClassDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.DerivedClass();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.Base.DerivedEntity src, MyGenerated.Code.Test.DerivedEntityDto dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated)src).AssignTo(( AnotherBaseWhereDerivedAreAutoGeneratedDto )dest);
			dest.Description = src.Description;
			dest.Title = src.Title;
		}
		public static void AssignTo(this MyGenerated.Code.Test.DerivedEntityDto src, CodeGenSample.Entities.Base.DerivedEntity dest) 
		{
			if (src == null || dest == null) return;
			((AnotherBaseWhereDerivedAreAutoGeneratedDto)src).AssignTo(( CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated )dest);
			dest.Description = src.Description;
			dest.Title = src.Title;
		}
		public static MyGenerated.Code.Test.DerivedEntityDto ToDto(this CodeGenSample.Entities.Base.DerivedEntity src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.DerivedEntityDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.Base.DerivedEntity ToNet(this MyGenerated.Code.Test.DerivedEntityDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.Base.DerivedEntity();
			src.AssignTo(result);
			return result;
		}
	}
}
