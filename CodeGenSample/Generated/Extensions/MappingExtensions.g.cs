using Nextended.Core.Extensions;// <auto-generated /> (11.08.2025 16:27:12)
using System;
namespace MyGenerated.Code.Test {
	public static partial class MappingExtensions
	{
		public static void AssignBaseProperties(this EntityBaseDto dto, CodeGenSample.Entities.Base.EntityBase src)
		{
			dto.Id = src.Id;
			dto.ReferenceKey = src.ReferenceKey;
		}
		public static void AssignBaseProperties(this CodeGenSample.Entities.Base.EntityBase entity, EntityBaseDto dto)
		{
			entity.Id = dto.Id;
			entity.ReferenceKey = dto.ReferenceKey;
		}
		public static void AssignBaseProperties(this AnotherBaseWhereDerivedAreAutoGeneratedDto dto, CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated src)
		{
			dto.Name = src.Name;
		}
		public static void AssignBaseProperties(this CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated entity, AnotherBaseWhereDerivedAreAutoGeneratedDto dto)
		{
			entity.Name = dto.Name;
		}
		public static MyGeneration.AddressDto ToMegaDto(this CodeGenSample.Entities.Address src) 
		{
			if(src == null) return null;
			var result = new MyGeneration.AddressDto();
			(( EntityBaseDto )result).AssignBaseProperties(src);
			result.Street = src.Street;
			result.City = src.City;
			result.Country = src.Country;
			return result;
		}
		public static CodeGenSample.Entities.Address AsSrc(this MyGeneration.AddressDto src) 
		{
			if(src == null) return null;
			var result = new CodeGenSample.Entities.Address();
			result.AssignBaseProperties(( EntityBaseDto )src);
			result.Street = src.Street;
			result.City = src.City;
			result.Country = src.Country;
			return result;
		}
		public static MyGenerated.Code.Test.EntityBaseDto ToDto(this CodeGenSample.Entities.Base.EntityBase src) 
		{
			if(src == null) return null;
			var result = new MyGenerated.Code.Test.EntityBaseDto();
			result.Id = src.Id;
			result.ReferenceKey = src.ReferenceKey;
			return result;
		}
		public static CodeGenSample.Entities.Base.EntityBase ToNet(this MyGenerated.Code.Test.EntityBaseDto src) 
		{
			if(src == null) return null;
			var result = new CodeGenSample.Entities.Base.EntityBase();
			result.Id = src.Id;
			result.ReferenceKey = src.ReferenceKey;
			return result;
		}
		public static MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto ToDto(this CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated src) 
		{
			if(src == null) return null;
			var result = new MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto();
			(( EntityBaseDto )result).AssignBaseProperties(src);
			result.Name = src.Name;
			return result;
		}
		public static CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated ToNet(this MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto src) 
		{
			if(src == null) return null;
			var result = new CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated();
			result.AssignBaseProperties(( EntityBaseDto )src);
			result.Name = src.Name;
			return result;
		}
		public static MyGenerated.Code.Test.MyUserDto ToMyDto(this CodeGenSample.Entities.User src) 
		{
			if(src == null) return null;
			var result = new MyGenerated.Code.Test.MyUserDto();
			(( EntityBaseDto )result).AssignBaseProperties(src);
			result.Name = src.Name;
			result.ThatUserAddress = src.Address.MapTo<MyGeneration.AddressDto>();
			result.UserLevel = src.Level?.ToDto();
			result.OtherInfos = src.OtherInfos;
			return result;
		}
		public static CodeGenSample.Entities.User ToNet(this MyGenerated.Code.Test.MyUserDto src) 
		{
			if(src == null) return null;
			var result = new CodeGenSample.Entities.User();
			result.AssignBaseProperties(( EntityBaseDto )src);
			result.Name = src.Name;
			result.Address = src.ThatUserAddress.MapTo<global::CodeGenSample.Entities.Address>();
			result.Level = src.UserLevel?.AsEntity();
			result.OtherInfos = src.OtherInfos;
			return result;
		}
		internal static MyGenerated.Code.Test.GenericItemDto<T, T2> ToDto<T, T2>(this CodeGenSample.Entities.GenericItem<T, T2> src) where T : class where T2 : struct
		{
			if(src == null) return null;
			var result = new MyGenerated.Code.Test.GenericItemDto<T, T2>();
			result.Value = src.Value;
			result.Id = src.Id;
			return result;
		}
		internal static CodeGenSample.Entities.GenericItem<T, T2> ToNet<T, T2>(this MyGenerated.Code.Test.GenericItemDto<T, T2> src) where T : class where T2 : struct
		{
			if(src == null) return null;
			var result = new CodeGenSample.Entities.GenericItem<T, T2>();
			result.Value = src.Value;
			result.Id = src.Id;
			return result;
		}
		public static ENUMS.UserLevelDto? ToDto(this CodeGenSample.Entities.Enums.UserLevel? src) => src.HasValue ? (ENUMS.UserLevelDto)(int)src.Value : null;
		public static CodeGenSample.Entities.Enums.UserLevel? AsEntity(this ENUMS.UserLevelDto? src) => src.HasValue ? (CodeGenSample.Entities.Enums.UserLevel)(int)src.Value : null;
		public static ENUMS.UserLevelDto ToDto(this CodeGenSample.Entities.Enums.UserLevel src) => (ENUMS.UserLevelDto)(int)src;
		public static CodeGenSample.Entities.Enums.UserLevel AsEntity(this ENUMS.UserLevelDto src) => (CodeGenSample.Entities.Enums.UserLevel)(int)src;
		public static MyGenerated.Code.Test.DerivedEntityDto ToDto(this CodeGenSample.Entities.Base.DerivedEntity src) 
		{
			if(src == null) return null;
			var result = new MyGenerated.Code.Test.DerivedEntityDto();
			(( AnotherBaseWhereDerivedAreAutoGeneratedDto )result).AssignBaseProperties(src);
			result.Description = src.Description;
			result.Title = src.Title;
			return result;
		}
		public static CodeGenSample.Entities.Base.DerivedEntity ToNet(this MyGenerated.Code.Test.DerivedEntityDto src) 
		{
			if(src == null) return null;
			var result = new CodeGenSample.Entities.Base.DerivedEntity();
			result.AssignBaseProperties(( AnotherBaseWhereDerivedAreAutoGeneratedDto )src);
			result.Description = src.Description;
			result.Title = src.Title;
			return result;
		}
	}
}
