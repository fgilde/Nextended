using Nextended.Core.Extensions;using System;
namespace MyGenerated.Code.Test {
	public static partial class MappingExtensions
	{
		public static void AssignTo(this CodeGenSample.Entities.AbstractBaseClass src, MyGenerated.Code.Test.AbstractBaseClassDto dest) 
		{
			if (src == null || dest == null) return;
			dest.Id = src.Id;
		}
		public static void AssignTo(this MyGenerated.Code.Test.AbstractBaseClassDto src, CodeGenSample.Entities.AbstractBaseClass dest) 
		{
			if (src == null || dest == null) return;
			dest.Id = src.Id;
		}
		public static MyGenerated.Code.Test.AbstractBaseClassDto ToDto(this CodeGenSample.Entities.AbstractBaseClass src, Func<MyGenerated.Code.Test.AbstractBaseClassDto> factory) 
		{
			if (src == null) return null;
			var result = factory != null ? factory() : null;
			if (result == null) return null;
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.AbstractBaseClass ToNet(this MyGenerated.Code.Test.AbstractBaseClassDto src, Func<CodeGenSample.Entities.AbstractBaseClass> factory) 
		{
			if (src == null) return null;
			var result = factory != null ? factory() : null;
			if (result == null) return null;
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.Address src, MyGeneration.AddressDto dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.Base.EntityBase)src).AssignTo(( EntityBaseDto )dest);
			dest.Street = src.Street;
			dest.City = src.City;
			dest.Country = src.Country;
			dest.Number = src.Number;
		}
		public static void AssignTo(this MyGeneration.AddressDto src, CodeGenSample.Entities.Address dest) 
		{
			if (src == null || dest == null) return;
			((EntityBaseDto)src).AssignTo(( CodeGenSample.Entities.Base.EntityBase )dest);
			dest.Street = src.Street;
			dest.City = src.City;
			dest.Country = src.Country;
			dest.Number = src.Number;
		}
		public static MyGeneration.AddressDto ToMegaDto(this CodeGenSample.Entities.Address src) 
		{
			if (src == null) return null;
			var result = new MyGeneration.AddressDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.Address AsSrc(this MyGeneration.AddressDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.Address();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated src, MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.Base.EntityBase)src).AssignTo(( EntityBaseDto )dest);
			dest.Name = src.Name;
		}
		public static void AssignTo(this MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto src, CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated dest) 
		{
			if (src == null || dest == null) return;
			((EntityBaseDto)src).AssignTo(( CodeGenSample.Entities.Base.EntityBase )dest);
			dest.Name = src.Name;
		}
		public static MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto ToDto(this CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated ToNet(this MyGenerated.Code.Test.AnotherBaseWhereDerivedAreAutoGeneratedDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.ClassWithDimension src, MyGenerated.Code.Test.ClassWithDimensionDto dest) 
		{
			if (src == null || dest == null) return;
			dest.Name = src.Name;
			dest.Dimension = src.Dimension.MapTo<MyGenerated.Code.Test.DimensionDto<MyGenerated.Code.Test.SuperUnitDto>>();
		}
		public static void AssignTo(this MyGenerated.Code.Test.ClassWithDimensionDto src, CodeGenSample.Entities.ClassWithDimension dest) 
		{
			if (src == null || dest == null) return;
			dest.Name = src.Name;
			dest.Dimension = src.Dimension.MapTo<CodeGenSample.Entities.Dimension<global::CodeGenSample.Entities.SuperUnit>>();
		}
		public static MyGenerated.Code.Test.ClassWithDimensionDto ToDto(this CodeGenSample.Entities.ClassWithDimension src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.ClassWithDimensionDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.ClassWithDimension ToNet(this MyGenerated.Code.Test.ClassWithDimensionDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.ClassWithDimension();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.DerivedClass src, MyGenerated.Code.Test.DerivedClassDto dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.AbstractBaseClass)src).AssignTo(( AbstractBaseClassDto )dest);
			dest.Name = src.Name;
		}
		public static void AssignTo(this MyGenerated.Code.Test.DerivedClassDto src, CodeGenSample.Entities.DerivedClass dest) 
		{
			if (src == null || dest == null) return;
			((AbstractBaseClassDto)src).AssignTo(( CodeGenSample.Entities.AbstractBaseClass )dest);
			dest.Name = src.Name;
		}
		public static MyGenerated.Code.Test.DerivedClassDto ToDto(this CodeGenSample.Entities.DerivedClass src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.DerivedClassDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.DerivedClass ToNet(this MyGenerated.Code.Test.DerivedClassDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.DerivedClass();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.Base.DerivedEntity src, MyGenerated.Code.Test.DerivedEntityDto dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated)src).AssignTo(( AnotherBaseWhereDerivedAreAutoGeneratedDto )dest);
			dest.Description = src.Description;
			dest.Title = src.Title;
		}
		public static void AssignTo(this MyGenerated.Code.Test.DerivedEntityDto src, CodeGenSample.Entities.Base.DerivedEntity dest) 
		{
			if (src == null || dest == null) return;
			((AnotherBaseWhereDerivedAreAutoGeneratedDto)src).AssignTo(( CodeGenSample.Entities.Base.AnotherBaseWhereDerivedAreAutoGenerated )dest);
			dest.Description = src.Description;
			dest.Title = src.Title;
		}
		public static MyGenerated.Code.Test.DerivedEntityDto ToDto(this CodeGenSample.Entities.Base.DerivedEntity src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.DerivedEntityDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.Base.DerivedEntity ToNet(this MyGenerated.Code.Test.DerivedEntityDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.Base.DerivedEntity();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo<T>(this CodeGenSample.Entities.DerivedGenericClass<T> src, MyGenerated.Code.Test.DerivedGenericClassDto<T> dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.GenericBaseClass<T>)src).AssignTo<T>(( GenericBaseClassDto<T> )dest);
			dest.Name = src.Name;
		}
		public static void AssignTo<T>(this MyGenerated.Code.Test.DerivedGenericClassDto<T> src, CodeGenSample.Entities.DerivedGenericClass<T> dest) 
		{
			if (src == null || dest == null) return;
			((GenericBaseClassDto<T>)src).AssignTo<T>(( CodeGenSample.Entities.GenericBaseClass<T> )dest);
			dest.Name = src.Name;
		}
		public static MyGenerated.Code.Test.DerivedGenericClassDto<T> ToDto<T>(this CodeGenSample.Entities.DerivedGenericClass<T> src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.DerivedGenericClassDto<T>();
			src.AssignTo<T>(result);
			return result;
		}
		public static CodeGenSample.Entities.DerivedGenericClass<T> ToNet<T>(this MyGenerated.Code.Test.DerivedGenericClassDto<T> src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.DerivedGenericClass<T>();
			src.AssignTo<T>(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.DerivedGenericClassWithInt src, MyGenerated.Code.Test.DerivedGenericClassWithIntDto dest) 
		{
			if (src == null || dest == null) return;
		}
		public static void AssignTo(this MyGenerated.Code.Test.DerivedGenericClassWithIntDto src, CodeGenSample.Entities.DerivedGenericClassWithInt dest) 
		{
			if (src == null || dest == null) return;
		}
		public static MyGenerated.Code.Test.DerivedGenericClassWithIntDto ToDto(this CodeGenSample.Entities.DerivedGenericClassWithInt src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.DerivedGenericClassWithIntDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.DerivedGenericClassWithInt ToNet(this MyGenerated.Code.Test.DerivedGenericClassWithIntDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.DerivedGenericClassWithInt();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.Base.EntityBase src, MyGenerated.Code.Test.EntityBaseDto dest) 
		{
			if (src == null || dest == null) return;
			dest.Id = src.Id;
			dest.ReferenceKey = src.ReferenceKey;
		}
		public static void AssignTo(this MyGenerated.Code.Test.EntityBaseDto src, CodeGenSample.Entities.Base.EntityBase dest) 
		{
			if (src == null || dest == null) return;
			dest.Id = src.Id;
			dest.ReferenceKey = src.ReferenceKey;
		}
		public static MyGenerated.Code.Test.EntityBaseDto ToDto(this CodeGenSample.Entities.Base.EntityBase src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.EntityBaseDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.Base.EntityBase ToNet(this MyGenerated.Code.Test.EntityBaseDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.Base.EntityBase();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo<T>(this CodeGenSample.Entities.GenericBaseClass<T> src, MyGenerated.Code.Test.GenericBaseClassDto<T> dest) 
		{
			if (src == null || dest == null) return;
			dest.Id = src.Id;
		}
		public static void AssignTo<T>(this MyGenerated.Code.Test.GenericBaseClassDto<T> src, CodeGenSample.Entities.GenericBaseClass<T> dest) 
		{
			if (src == null || dest == null) return;
			dest.Id = src.Id;
		}
		public static MyGenerated.Code.Test.GenericBaseClassDto<T> ToDto<T>(this CodeGenSample.Entities.GenericBaseClass<T> src, Func<MyGenerated.Code.Test.GenericBaseClassDto<T>> factory) 
		{
			if (src == null) return null;
			var result = factory != null ? factory() : null;
			if (result == null) return null;
			src.AssignTo<T>(result);
			return result;
		}
		public static CodeGenSample.Entities.GenericBaseClass<T> ToNet<T>(this MyGenerated.Code.Test.GenericBaseClassDto<T> src, Func<CodeGenSample.Entities.GenericBaseClass<T>> factory) 
		{
			if (src == null) return null;
			var result = factory != null ? factory() : null;
			if (result == null) return null;
			src.AssignTo<T>(result);
			return result;
		}
		internal static void AssignTo<T, T2>(this CodeGenSample.Entities.GenericItem<T, T2> src, MyGenerated.Code.Test.GenericItemDto<T, T2> dest) where T : class where T2 : struct
		{
			if (src == null || dest == null) return;
			dest.Value = src.Value;
			dest.Id = src.Id;
		}
		internal static void AssignTo<T, T2>(this MyGenerated.Code.Test.GenericItemDto<T, T2> src, CodeGenSample.Entities.GenericItem<T, T2> dest) where T : class where T2 : struct
		{
			if (src == null || dest == null) return;
			dest.Value = src.Value;
			dest.Id = src.Id;
		}
		internal static MyGenerated.Code.Test.GenericItemDto<T, T2> ToDto<T, T2>(this CodeGenSample.Entities.GenericItem<T, T2> src) where T : class where T2 : struct
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.GenericItemDto<T, T2>();
			src.AssignTo<T, T2>(result);
			return result;
		}
		internal static CodeGenSample.Entities.GenericItem<T, T2> ToNet<T, T2>(this MyGenerated.Code.Test.GenericItemDto<T, T2> src) where T : class where T2 : struct
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.GenericItem<T, T2>();
			src.AssignTo<T, T2>(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.Base.HubBaseGuidEntity src, MyGenerated.Code.Test.HubBaseGuidEntityDto dest) 
		{
			if (src == null || dest == null) return;
			dest.XName = src.XName;
			dest.HubBaseSubClass = src.HubBaseSubClass;
			dest.Id = src.Id;
			dest.OwnerId = src.OwnerId;
		}
		public static void AssignTo(this MyGenerated.Code.Test.HubBaseGuidEntityDto src, CodeGenSample.Entities.Base.HubBaseGuidEntity dest) 
		{
			if (src == null || dest == null) return;
			dest.XName = src.XName;
			dest.HubBaseSubClass = src.HubBaseSubClass;
			// skipped 'Id': destination not publicly writable
			dest.OwnerId = src.OwnerId;
		}
		public static MyGenerated.Code.Test.HubBaseGuidEntityDto ToDto(this CodeGenSample.Entities.Base.HubBaseGuidEntity src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.HubBaseGuidEntityDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.Base.HubBaseGuidEntity ToNet(this MyGenerated.Code.Test.HubBaseGuidEntityDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.Base.HubBaseGuidEntity();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.Base.Shipment src, MyGenerated.Code.Test.ShipmentDto dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.Base.HubBaseGuidEntity)src).AssignTo(( HubBaseGuidEntityDto )dest);
			dest.TrackingNumber = src.TrackingNumber;
			dest.ShippedDate = src.ShippedDate;
			dest.DeliveredDate = src.DeliveredDate;
			dest.OrderId = src.OrderId;
		}
		public static void AssignTo(this MyGenerated.Code.Test.ShipmentDto src, CodeGenSample.Entities.Base.Shipment dest) 
		{
			if (src == null || dest == null) return;
			((HubBaseGuidEntityDto)src).AssignTo(( CodeGenSample.Entities.Base.HubBaseGuidEntity )dest);
			dest.TrackingNumber = src.TrackingNumber;
			dest.ShippedDate = src.ShippedDate;
			dest.DeliveredDate = src.DeliveredDate;
			dest.OrderId = src.OrderId;
		}
		public static MyGenerated.Code.Test.ShipmentDto ToDto(this CodeGenSample.Entities.Base.Shipment src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.ShipmentDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.Base.Shipment ToNet(this MyGenerated.Code.Test.ShipmentDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.Base.Shipment();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.SuperUnit src, MyGenerated.Code.Test.SuperUnitDto dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.Unit)src).AssignTo(( UnitDto )dest);
		}
		public static void AssignTo(this MyGenerated.Code.Test.SuperUnitDto src, CodeGenSample.Entities.SuperUnit dest) 
		{
			if (src == null || dest == null) return;
			((UnitDto)src).AssignTo(( CodeGenSample.Entities.Unit )dest);
		}
		public static MyGenerated.Code.Test.SuperUnitDto ToDto(this CodeGenSample.Entities.SuperUnit src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.SuperUnitDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.SuperUnit ToNet(this MyGenerated.Code.Test.SuperUnitDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.SuperUnit();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.Unit src, MyGenerated.Code.Test.UnitDto dest) 
		{
			if (src == null || dest == null) return;
			dest.BaseUnitFactor = src.BaseUnitFactor;
			dest.NullPointShift = src.NullPointShift;
		}
		public static void AssignTo(this MyGenerated.Code.Test.UnitDto src, CodeGenSample.Entities.Unit dest) 
		{
			if (src == null || dest == null) return;
			dest.BaseUnitFactor = src.BaseUnitFactor;
			dest.NullPointShift = src.NullPointShift;
		}
		public static MyGenerated.Code.Test.UnitDto ToDto(this CodeGenSample.Entities.Unit src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.UnitDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.Unit ToNet(this MyGenerated.Code.Test.UnitDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.Unit();
			src.AssignTo(result);
			return result;
		}
		public static void AssignTo(this CodeGenSample.Entities.User src, MyGenerated.Code.Test.MyUserDto dest) 
		{
			if (src == null || dest == null) return;
			((CodeGenSample.Entities.Base.EntityBase)src).AssignTo(( EntityBaseDto )dest);
			dest.Name = src.Name;
			dest.ThatUserAddress = src.Address.MapTo<MyGeneration.AddressDto>();
			dest.AnotherAddress = src.AnotherAddress?.ToMegaDto();
			dest.AdditionalAddresses = src.AdditionalAddresses != null ? System.Linq.Enumerable.ToList(System.Linq.Enumerable.Select(src.AdditionalAddresses, x => x?.ToMegaDto())) : null;
			dest.XyZ = src.XyZ;
			dest.UserLevel = src.Level?.ToDto();
			dest.OtherInfos = src.OtherInfos;
			dest.LastOnline = src.LastOnline;
			dest.Birthday = src.Birthday;
			dest.OtherDate = src.OtherDate;
		}
		public static void AssignTo(this MyGenerated.Code.Test.MyUserDto src, CodeGenSample.Entities.User dest) 
		{
			if (src == null || dest == null) return;
			((EntityBaseDto)src).AssignTo(( CodeGenSample.Entities.Base.EntityBase )dest);
			dest.Name = src.Name;
			dest.Address = src.ThatUserAddress.MapTo<global::CodeGenSample.Entities.Address>();
			dest.AnotherAddress = src.AnotherAddress?.AsSrc();
			dest.AdditionalAddresses = src.AdditionalAddresses != null ? System.Linq.Enumerable.ToList(System.Linq.Enumerable.Select(src.AdditionalAddresses, x => x?.AsSrc())) : null;
			dest.XyZ = src.XyZ;
			dest.Level = src.UserLevel?.AsEntity();
			dest.OtherInfos = src.OtherInfos;
			dest.LastOnline = src.LastOnline;
			dest.Birthday = src.Birthday;
			dest.OtherDate = src.OtherDate;
		}
		public static MyGenerated.Code.Test.MyUserDto ToMyDto(this CodeGenSample.Entities.User src) 
		{
			if (src == null) return null;
			var result = new MyGenerated.Code.Test.MyUserDto();
			src.AssignTo(result);
			return result;
		}
		public static CodeGenSample.Entities.User ToNet(this MyGenerated.Code.Test.MyUserDto src) 
		{
			if (src == null) return null;
			var result = new CodeGenSample.Entities.User();
			src.AssignTo(result);
			return result;
		}
		public static ENUMS.UserLevelDto? ToDto(this CodeGenSample.Entities.Enums.UserLevel? src) => src.HasValue ? (ENUMS.UserLevelDto)(int)src.Value : null;
		public static CodeGenSample.Entities.Enums.UserLevel? AsEntity(this ENUMS.UserLevelDto? src) => src.HasValue ? (CodeGenSample.Entities.Enums.UserLevel)(int)src.Value : null;
		public static ENUMS.UserLevelDto ToDto(this CodeGenSample.Entities.Enums.UserLevel src) => (ENUMS.UserLevelDto)(int)src;
		public static CodeGenSample.Entities.Enums.UserLevel AsEntity(this ENUMS.UserLevelDto src) => (CodeGenSample.Entities.Enums.UserLevel)(int)src;
	}
}
