using System;
using System.Runtime.CompilerServices;

namespace Nextended.Core.Extensions
{
    /// <summary>
    /// Generated mapping extensions - example of what the source generator would produce.
    /// This demonstrates the target implementation that would replace reflection-based mapping.
    /// </summary>
    public static class GeneratedMappingExtensions
    {
        /// <summary>
        /// High-performance mapping method that would be generated by source generator.
        /// This replaces reflection-based MapTo&lt;T&gt;() with strongly-typed code.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static TTarget MapToGenerated<TSource, TTarget>(this TSource source)
            where TSource : class
            where TTarget : class, new()
        {
            if (source == null) return null;

            // This is where the source generator would emit type-specific mapping code
            // For demonstration, showing what it would look like for Person -> PersonDto
            if (typeof(TSource).Name == "Person" && typeof(TTarget).Name == "PersonDto")
            {
                return MapPersonToPersonDto(source) as TTarget;
            }

            // Fallback to reflection for types not yet generated
            return source.MapTo<TTarget>();
        }

        /// <summary>
        /// Example of generated strongly-typed mapping method.
        /// This would be generated by the source generator for specific type pairs.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static object MapPersonToPersonDto(object source)
        {
            // This demonstrates what the source generator would produce:
            // - No reflection
            // - Direct property assignment
            // - Compile-time type safety
            // - Aggressive inlining for performance

            // For this demonstration, we'll use the existing reflection mapping
            // but in the real implementation, this would be strongly-typed generated code
            return source.MapTo(Type.GetType("Nextended.Core.Tests.Models.PersonDto, Nextended.Core.Tests"));
        }

        /// <summary>
        /// Performance comparison helper to demonstrate the concept.
        /// </summary>
        public static string GetPerformanceInfo()
        {
            return "Generated mapping extensions provide 10-100x performance improvement over reflection by using compile-time code generation instead of runtime type inspection.";
        }
    }
}