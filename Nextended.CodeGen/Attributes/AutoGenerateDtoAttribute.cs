namespace Nextended.CodeGen.Attributes
{

    /// <summary>
    /// Attribute das dafür sorgt das für die klasse auf dem es gesetzt ist automatisch ein ComInterface und eine Com Klasse erzeugt werden
    /// (Erzeugt per T4-Template zur Compiletime die Com Klassen)
    /// </summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Enum, AllowMultiple = true)]
    public class AutoGenerateDtoAttribute : Attribute
    {
        // TODO: BaseType, BaseForInterface, Keep Attributes, pre class gen,
        // post class gen, pre interface gen, post interface gen, pre and post for properties also attributes for properties.
        // Interface as get only, also on property.. 

        public string Namespace { get; set; }

        /// <summary>
        /// Wird bei der erstellten Klasse und Interface als Prefix im Namen benutzt (z-B IComMyType)
        /// </summary>
        public string Prefix { get; set; }

        /// <summary>
        /// Wird bei der erstellten Klasse und Interface als Suffix im Namen benutzt (z-B IComMyTypeSuffix)
        /// </summary>        
        public string Suffix { get; set; }

        /// <summary>
        /// Mit dieser Eigenschaft kann der klassenname der erzeugten Klasse überschreieben werden (dann greift keine Suffix u Prefix logik)
        /// </summary>        
        public string GeneratedClassName { get; set; }

        /// <summary>
        /// Gibt an ob das Attribute "ToNetMappingAttribute" für die automatische erstellung der COM -> .NET Konvertierung erzeugt werden soll
        /// </summary>        
        public bool GenerateToNetMapping { get; set; }

        /// <summary>
        /// Name der generierten mapping Methode
        /// </summary>
        public string? ToDtoMethodName { get; set; }

        /// <summary>
        /// Set to true then the generated classes are COM visible and fully com compatible
        /// </summary>
        public bool IsComCompatible { get; set; }

        /// <summary>
        /// Gets or sets the name of the generic parameter type.
        /// </summary>       
        public string[] ExplicitGenericImplementationTypes { get; set; }

        /// <summary>
        /// This string is used to set the base type of the generated DTO class.
        /// </summary>
        public string BaseTypeString { get; set; }

        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="T:System.Attribute"/>-Klasse.
        /// </summary>
        public AutoGenerateDtoAttribute(Type genericTypeDescription)
            : this()
        {
            ExplicitGenericImplementationTypes = genericTypeDescription.GetGenericArguments().Select(t => t.Name).ToArray();
        }

        /// <summary>
        /// Initialisiert eine neue Instanz der <see cref="T:System.Attribute"/>-Klasse.
        /// </summary>
        public AutoGenerateDtoAttribute()
        {
            Prefix = "";
            Suffix = "Dto";
            GenerateToNetMapping = true;
        }
    }
}