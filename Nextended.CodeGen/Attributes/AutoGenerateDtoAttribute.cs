namespace Nextended.CodeGen.Attributes
{
    /// <summary>
    /// Attribute to automatically generate a COM interface and a COM class for the class or enum it is applied to.
    /// (The classes are generated at compile-time using a T4 template.)
    /// </summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Enum, AllowMultiple = true)]
    public class AutoGenerateDtoAttribute : Attribute
    {
        // TODO: BaseType, BaseForInterface, Keep Attributes, pre class gen,
        // post class gen, pre interface gen, post interface gen, pre and post for properties, also attributes for properties.
        // Interface as get only, also on property.. 

        /// <summary>
        /// Gets or sets the namespace used for the generated classes and interfaces.
        /// </summary>
        public string Namespace { get; set; }

        /// <summary>
        /// Gets or sets the prefix for the generated class and interface names (e.g., IComMyType).
        /// </summary>
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or sets the suffix for the generated class and interface names (e.g., IComMyTypeSuffix).
        /// </summary>        
        public string Suffix { get; set; }

        /// <summary>
        /// Allows you to override the generated class name. If this is set, prefix and suffix logic will not be applied.
        /// </summary>        
        public string GeneratedClassName { get; set; }

        /// <summary>
        /// Indicates whether the "ToNetMappingAttribute" should be generated for automatic COM to .NET conversion.
        /// </summary>        
        public bool GenerateMapping { get; set; }

        /// <summary>
        /// Gets or sets the name of the generated mapping method.
        /// </summary>
        public string? ToDtoMethodName { get; set; }

        /// <summary>
        /// Gets or sets the name of the generated mapping method that is called by the DTO class to convert the DTO back to the source class.
        /// </summary>
        public string? ToSourceMethodName { get; set; }

        /// <summary>
        /// If set to true, the generated classes are COM visible and fully COM compatible.
        /// </summary>
        public bool IsComCompatible { get; set; }

        /// <summary>
        /// Gets or sets the names of the generic parameter types for explicit generic implementation.
        /// </summary>       
        public string[] ExplicitGenericImplementationTypes { get; set; }

        /// <summary>
        /// Sets the base type for the generated DTO class.
        /// </summary>
        public string BaseTypeString { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoGenerateDtoAttribute"/> class with explicit generic implementations.
        /// </summary>
        public AutoGenerateDtoAttribute(Type explicitGenericImplementations)
            : this()
        {
            ExplicitGenericImplementationTypes = explicitGenericImplementations.GetGenericArguments().Select(t => t.Name).ToArray();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutoGenerateDtoAttribute"/> class.
        /// </summary>
        public AutoGenerateDtoAttribute()
        {
            Prefix = "";
            Suffix = "Dto";
            GenerateMapping = true;
        }
    }
}
