using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Nextended.Core.Attributes;
using Nextended.CodeGen.Generators.DtoGeneration;

namespace Nextended.CodeGen.Helper;

internal static class StringBuilderHelper
{
    public static StringBuilder AppendIf(this StringBuilder sb, string value, bool condition = true)
    {
        if (condition)
            sb.Append(value);
        return sb;
    }

    public static StringBuilder AppendLineIf(this StringBuilder sb, string line, bool condition = true)
    {
        if (condition)
            sb.AppendLine(line);
        return sb;
    }
    public static StringBuilder AppendUsings(this StringBuilder sb, params string[] namespaces)
    {
        foreach (var ns in namespaces)
        {
            if (string.IsNullOrWhiteSpace(ns)) continue;
            sb.AppendLine($"using {ns};");
        }
        return sb;
    }


    public static StringBuilder CloseNamespace(this StringBuilder sb)
    {
        sb.AppendLine("}");
        return sb;
    }
    public static StringBuilder OpenNamespace(this StringBuilder sb, string @namespace)
    {
        sb.AppendLine($"namespace {@namespace} {{");
        return sb;
    }

    public static StringBuilder OpenRegion(this StringBuilder sb, string name, bool condition = true)
    {
        if (!condition)
            return sb;
        sb.AppendLine($"\t#region {name}");
        sb.AppendLine();
        return sb;
    }

    public static StringBuilder CloseRegion(this StringBuilder sb, string name, bool condition = true)
    {
        if (!condition)
            return sb;
        sb.AppendLine($"\t#endregion {name}");
        sb.AppendLine();
        return sb;
    }

    public static StringBuilder AppendFileHeader(this StringBuilder sb, params string[] names)
    {
        sb.AppendLine("/// <summary>");
        sb.AppendLine($"/// --- AUTO GENERATED CODE ({DateTime.Now:G}) ---");
        foreach (var name in names) sb.AppendLine($"/// --- {name} ---");
        sb.AppendLine("/// </summary>\n");
        return sb;
    }

    public static StringBuilder AppendClassHeader(this StringBuilder sb, string className, string namespaceName, params string[] usings)
    {
        sb.AppendLine($"// <auto-generated /> ({DateTime.Now:G})");
        if (!usings.Any())
            usings = ["System"];
        sb.AppendUsings(usings);
        sb.AppendLine($"namespace {namespaceName} {{");
        sb.AppendLine($"\tpublic static partial class {className}");
        sb.AppendLine("\t{");

        return sb;
    }

    public static StringBuilder AppendAttributesIf(this StringBuilder sb, ISymbol symbol, bool condition, int indent = 1)
    {
        if (condition)
        {
            foreach (var att in symbol?.GetAttributes().Where(a => a.ShouldEmitAttribute()) ?? [])
            {
                var indentStr = string.Join("", Enumerable.Repeat("\t", indent));
                sb.AppendLine(indentStr + att.ToCSharpString());
            }
        }

        return sb;
    }

    private static readonly string OwnNamespacePrefix = typeof(AutoGenerateDtoAttribute).Namespace;

    private static bool ShouldEmitAttribute(this AttributeData att)
    {
        var ns = att.AttributeClass?.ContainingNamespace?.ToDisplayString() ?? "";
        return !ns.StartsWith(OwnNamespacePrefix, StringComparison.Ordinal);
    }

}