using Nextended.Core.Enums;

namespace Nextended.CodeGen.Config;

public class CodeGenerationConfigBase
{
    /// <summary>
    /// If set to true, the generation will be disabled.
    /// </summary>
    public bool DisableGeneration { get; set; }
    
    /// <summary>
    /// Type of the generated model.
    /// Can be one of the following: Class, Record, RecordStruct, Struct.
    /// </summary>
    public GeneratedModelType ModelType { get; set; }
    
    /// <summary>
    /// Default namespace for generated classes. Can be overwritten for DTOs in the AutoGenerateDtoAttribute.
    /// If null same as source will be used.
    /// (can be overwritten per class in Attribute layer)
    /// </summary>
    public string? Namespace { get; set; } = "Nextended.CodeGen.Generated";

    /// <summary>
    /// Default suffix for generated DTOs will only work when not set on Attribute layer.
    /// </summary>
    public string? Suffix { get; set; }

    /// <summary>
    /// Default prefix for generated DTOs will only work when not set on Attribute layer.
    /// (can be overwritten per class in Attribute layer)
    /// </summary>
    public string? Prefix { get; set; }

    /// <summary>
    /// The path where the generated file will be saved.
    /// By default it's null and will be added to the generated code context.
    /// If a path is set, the file will be saved to that path and NOT added to the generated code context.
    /// </summary>
    public string? OutputPath { get; set; }

    /// <summary>
    /// Set t true to generate file headers for the generated code files.
    /// </summary>
    public bool CreateFileHeaders { get; set; } = true;

}