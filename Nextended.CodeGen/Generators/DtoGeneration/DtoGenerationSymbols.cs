using Microsoft.CodeAnalysis;
using Nextended.CodeGen.Attributes;

namespace Nextended.CodeGen.Generators.DtoGeneration;

public class DtoGenerationSymbols
{
    public INamedTypeSymbol? AutoGenerateDto, Ignore, PropertySetting;

    public static DtoGenerationSymbols Collect(Compilation c) => new()
    {
        AutoGenerateDto = c.GetTypeByMetadataName(typeof(AutoGenerateDtoAttribute).FullName!),
        Ignore = c.GetTypeByMetadataName(typeof(IgnoreOnGenerationAttribute).FullName!),
        PropertySetting = c.GetTypeByMetadataName(typeof(GenerationPropertySettingAttribute).FullName!)
    };

    public List<INamedTypeSymbol> FindTypesWithAttribute(Compilation compilation)
    {
        return AutoGenerateDto != null
            ? FindTypesWithAttributeFromAllAssemblies(compilation, AutoGenerateDto)
            : new List<INamedTypeSymbol>();
    }

    public static List<INamedTypeSymbol> FindTypesWithAttributeFromAllAssemblies(
        Compilation compilation, params INamedTypeSymbol[] attributeTypes)
    {
        static IEnumerable<INamedTypeSymbol> FindAllTypes(INamespaceSymbol ns)
        {
            foreach (var member in ns.GetMembers())
            {
                if (member is INamespaceSymbol childNs)
                {
                    foreach (var t in FindAllTypes(childNs))
                        yield return t;
                }
                else if (member is INamedTypeSymbol t)
                {
                    yield return t;
                }
            }
        }

        static bool IsAttributeOrDerived(INamedTypeSymbol? attrClass, INamedTypeSymbol expectedBase)
        {
            while (attrClass != null)
            {
                if (SymbolEqualityComparer.Default.Equals(attrClass, expectedBase))
                    return true;
                attrClass = attrClass.BaseType;
            }
            return false;
        }

        var allTypes = FindAllTypes(compilation.GlobalNamespace);

        return allTypes
            .Where(symbol => symbol.GetAttributes().Any(a =>
                attributeTypes.Any(attr => IsAttributeOrDerived(a.AttributeClass, attr))))
            .ToList();
    }
}
