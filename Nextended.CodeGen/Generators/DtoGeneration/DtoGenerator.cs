using Microsoft.CodeAnalysis;
using Nextended.CodeGen.Config;
using Nextended.CodeGen.Helper;

namespace Nextended.CodeGen.Generators.DtoGeneration;

public class DtoGenerator
{
    private readonly DtoGenerationConfig _config;

    public DtoGenerator(DtoGenerationConfig config)
    {
        _config = config;
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var compilation = context.Compilation;
        var symbols = DtoGenerationSymbols.Collect(compilation, _config);
        if (symbols.AutoGenerateDto == null)
            return;
        string[] allNs = [];
        var types = symbols.FindTypesWithAttribute(compilation);
        var generator = new DtoCodeGenerator(_config, symbols);

        if (_config.OneFilePerClass)
        {
            foreach (var type in types)
            {
                var file = generator.GenerateAllForType(type, types);
                context.AddSource(file.FileName, file.Content);
            }
        }
        else
        {
            var typesByNs = types.GroupBy(t => generator.Namespace(t));
            allNs = typesByNs.OrderBy(g => g.Key).Select(t => t.Key).Distinct().ToArray();
            foreach (var group in typesByNs)
            {
                var ns = group.Key;
                var dtoTypeDict = types.ToDictionary(t => t.ToDisplayString(), t => t);
                var file = generator.GenerateNamespaceFile(ns, group, dtoTypeDict);
                context.AddSource(file.FileName, file.Content.InsertUsings(allNs));
            }
        }

        if (generator.HasGuids)
        {
            var comIdFile = generator.GenerateComIdFile(types);
            context.AddSource(comIdFile.FileName, comIdFile.Content);
        }

        
        var mappingFile = generator.GenerateMappingExtensions(types.ToList());
        if (mappingFile != null)
        {
            context.AddSource(mappingFile.FileName, mappingFile.Content.InsertUsings(allNs));
        }
    }
}
